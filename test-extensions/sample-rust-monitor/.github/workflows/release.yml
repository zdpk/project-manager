name: Release Extension

on:
  push:
    tags: ['v*']
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-apple-darwin
            os: macos-latest
            binary_name: pm-ext-{{name}}
            asset_name: pm-ext-{{name}}-darwin-aarch64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            binary_name: pm-ext-{{name}}
            asset_name: pm-ext-{{name}}-linux-x86_64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            binary_name: pm-ext-{{name}}
            asset_name: pm-ext-{{name}}-linux-aarch64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            binary_name: pm-ext-{{name}}.exe
            asset_name: pm-ext-{{name}}-windows-x86_64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV


      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Unix)
        if: matrix.os != 'windows-latest'
        run: strip target/${{ matrix.target }}/release/${{ matrix.binary_name }}

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.binary_name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "*" -type f -exec cp {} release-assets/ \;
          ls -la release-assets/

      - name: Generate checksums
        run: |
          cd release-assets
          for file in *; do
            sha256sum "$file" > "$file.sha256"
          done

      - name: Create install script
        run: |
          cat > release-assets/install.sh << 'EOF'
          #!/bin/bash
          
          set -e
          
          # Extension metadata
          EXTENSION_NAME="sample-rust-monitor"
          GITHUB_REPO="${{ github.repository }}"
          
          # Colors for output
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          BLUE='\033[0;34m'
          NC='\033[0m' # No Color
          
          # Print colored output
          print_info() { echo -e "${BLUE}ℹ️  $1${NC}"; }
          print_success() { echo -e "${GREEN}✅ $1${NC}"; }
          print_warning() { echo -e "${YELLOW}⚠️  $1${NC}"; }
          print_error() { echo -e "${RED}❌ $1${NC}"; }
          
          # Detect platform
          detect_platform() {
              local os arch
              
              os=$(uname -s | tr '[:upper:]' '[:lower:]')
              arch=$(uname -m)
              
              case "$os" in
                  darwin)
                      case "$arch" in
                          arm64|aarch64) echo "darwin-aarch64" ;;
                          x86_64) 
                              print_error "Intel Macs are not supported for this extension"
                              print_info "Apple Silicon (M1/M2/M3) is required"
                              exit 1 
                              ;;
                          *)
                              print_error "Unsupported macOS architecture: $arch"
                              exit 1
                              ;;
                      esac
                      ;;
                  linux)
                      case "$arch" in
                          aarch64|arm64) echo "linux-aarch64" ;;
                          x86_64|amd64) echo "linux-x86_64" ;;
                          *)
                              print_error "Unsupported Linux architecture: $arch"
                              print_info "Supported: x86_64, aarch64"
                              exit 1
                              ;;
                      esac
                      ;;
                  mingw*|msys*|cygwin*)
                      case "$arch" in
                          x86_64|amd64) echo "windows-x86_64" ;;
                          aarch64|arm64) echo "windows-aarch64" ;;
                          *)
                              print_error "Unsupported Windows architecture: $arch"
                              print_info "Supported: x86_64, aarch64"
                              exit 1
                              ;;
                      esac
                      ;;
                  *)
                      print_error "Unsupported operating system: $os"
                      print_info "Supported: macOS (Apple Silicon), Linux, Windows"
                      exit 1
                      ;;
              esac
          }
          
          # Get latest release info
          get_latest_release() {
              curl -s "https://api.github.com/repos/$GITHUB_REPO/releases/latest" | \
                  grep -o '"tag_name": "[^"]*' | \
                  cut -d'"' -f4
          }
          
          # Download and install
          install_extension() {
              local platform version binary_name download_url
              
              platform=$(detect_platform)
              version=$(get_latest_release)
              
              if [ -z "$version" ]; then
                  print_error "Failed to get latest release version"
                  exit 1
              fi
              
              case "$platform" in
                  *windows*) binary_name="pm-ext-${EXTENSION_NAME}-${platform}.exe" ;;
                  *) binary_name="pm-ext-${EXTENSION_NAME}-${platform}" ;;
              esac
              
              download_url="https://github.com/$GITHUB_REPO/releases/download/$version/$binary_name"
              
              print_info "Detected platform: $platform"
              print_info "Latest version: $version"
              print_info "Downloading from: $download_url"
              
              # Download binary
              if ! curl -fsSL "$download_url" -o "/tmp/$binary_name"; then
                  print_error "Failed to download extension binary"
                  print_info "URL: $download_url"
                  print_info "Please check if this platform is supported for this extension"
                  exit 1
              fi
              
              # Make executable
              chmod +x "/tmp/$binary_name"
              
              # Install via PM
              if command -v pm >/dev/null 2>&1; then
                  print_info "Installing extension via PM..."
                  pm ext install "$EXTENSION_NAME" --source "/tmp/$binary_name"
                  print_success "Extension '$EXTENSION_NAME' installed successfully!"
                  print_info "Test with: pm $EXTENSION_NAME --help"
              else
                  print_warning "PM not found in PATH"
                  print_info "Manual installation: copy '/tmp/$binary_name' to your PM extensions directory"
                  print_info "Or add PM to your PATH and run this script again"
              fi
          }
          
          # Main
          main() {
              print_info "Installing PM extension: $EXTENSION_NAME"
              install_extension
          }
          
          main "$@"
          EOF
          
          chmod +x release-assets/install.sh

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-assets/*
          generate_release_notes: true
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
