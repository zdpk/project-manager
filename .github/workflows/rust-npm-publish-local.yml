name: Rust Build and NPM Publish Local

on:
  workflow_call:
    inputs:
      binaries:
        description: 'Comma-separated list of binary names to build (e.g., pm,_pm)'
        type: string
        required: true
      platforms:
        description: 'Comma-separated list of platforms to build for (e.g., macos-arm64,linux-x64)'
        type: string
        required: true
      main_binary:
        description: 'Name of the main binary for npm package'
        type: string
        required: true
      npm_enabled:
        description: 'Enable NPM package publishing'
        type: boolean
        default: true
      npm_directory:
        description: 'Directory containing NPM package'
        type: string
        default: 'npm'
      tag_name:
        description: 'Release tag name'
        type: string
        required: true
      rust_version:
        description: 'Rust toolchain version'
        type: string
        default: 'stable'
      node_version:
        description: 'Node.js version for NPM operations'
        type: string
        default: '20'
    secrets:
      NPM_TOKEN:
        description: 'NPM authentication token'
        required: false
      GH_TOKEN:
        description: 'GitHub token'
        required: true

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      tag_name: ${{ steps.set-tag.outputs.tag_name }}
    steps:
      - name: Set release tag
        id: set-tag
        run: |
          echo "tag_name=${{ inputs.tag_name }}" >> $GITHUB_OUTPUT
          
      - name: Prepare build matrix
        id: set-matrix
        run: |
          platforms="${{ inputs.platforms }}"
          
          matrix="["
          first=true
          
          IFS=',' read -ra PLATFORM_ARRAY <<< "$platforms"
          for platform_entry in "${PLATFORM_ARRAY[@]}"; do
            platform_entry=$(echo "$platform_entry" | xargs) # trim whitespace
            
            # Parse platform-arch format
            if [[ "$platform_entry" == "macos-arm64" ]]; then
              platform="macos"
              arch="arm64"
              target="aarch64-apple-darwin"
              os="macos-latest"
            elif [[ "$platform_entry" == "macos-x64" ]]; then
              platform="macos"
              arch="x64"  
              target="x86_64-apple-darwin"
              os="macos-latest"
            elif [[ "$platform_entry" == "linux-x64" ]]; then
              platform="linux"
              arch="x64"
              target="x86_64-unknown-linux-gnu"
              os="ubuntu-latest"
            elif [[ "$platform_entry" == "linux-arm64" ]]; then
              platform="linux"
              arch="arm64"
              target="aarch64-unknown-linux-gnu"
              os="ubuntu-latest"
            elif [[ "$platform_entry" == "windows-x64" ]]; then
              platform="windows"
              arch="x64"
              target="x86_64-pc-windows-msvc"
              os="windows-latest"
            else
              echo "Unsupported platform: $platform_entry"
              continue
            fi
            
            if [ "$first" = false ]; then
              matrix="$matrix,"
            fi
            first=false
            
            matrix="$matrix{\"platform\":\"$platform\",\"arch\":\"$arch\",\"target\":\"$target\",\"os\":\"$os\"}"
          done
          
          matrix="$matrix]"
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo "Generated matrix: $matrix"

  build-and-release:
    needs: prepare-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Build Rust binaries
        id: build
        uses: ./actions/actions/rust-build
        with:
          target: ${{ matrix.target }}
          binaries: ${{ inputs.binaries }}
          cross_compile: ${{ matrix.arch == 'arm64' && matrix.platform == 'linux' }}
          rust_version: ${{ inputs.rust_version }}
          
      - name: Upload to GitHub Release
        uses: ./actions/actions/github-release
        with:
          tag_name: ${{ needs.prepare-matrix.outputs.tag_name }}
          built_binaries: ${{ steps.build.outputs.built_binaries }}
          platform: ${{ matrix.platform }}
          arch: ${{ matrix.arch }}
          target: ${{ matrix.target }}
          token: ${{ secrets.GH_TOKEN }}

  publish-npm:
    if: inputs.npm_enabled
    needs: [prepare-matrix, build-and-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          registry-url: 'https://registry.npmjs.org'
          
      - name: Publish NPM package
        uses: ./actions/actions/npm-publish
        with:
          npm_directory: ${{ inputs.npm_directory }}
          main_binary: ${{ inputs.main_binary }}
          tag_name: ${{ needs.prepare-matrix.outputs.tag_name }}
          token: ${{ secrets.NPM_TOKEN }}