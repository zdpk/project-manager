name: Claude Assistant
on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned, labeled]
  pull_request_review:
    types: [submitted]

jobs:
  claude-response:
    runs-on: ubuntu-latest
    if: |
      (github.event.comment && contains(github.event.comment.body, '@claude')) ||
      (github.event.review && contains(github.event.review.body, '@claude')) ||
      (github.event.issue && (contains(github.event.issue.title, '@claude') || contains(github.event.issue.body, '@claude')))
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          allowed_tools: "Bash(cargo build),Bash(cargo test),Bash(cargo fmt --check),Bash(cargo clippy),Bash(cargo doc),LS,Read,Edit,Write,Glob,Grep"
          custom_instructions: |
            You have tools for Rust project management:
            - cargo build: Compile the project
            - cargo test: Run tests
            - cargo fmt --check: Check code formatting
            - cargo clippy: Run linting
            - cargo doc: Generate documentation
            
            This is a Rust CLI project for project management. Follow Rust best practices and conventions.
          max_turns: "5"
